pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentials')
        GITHUB_CREDENTIALS = credentials('github-credentials')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/your-username/alx-backend-python.git',
                credentialsId: 'github-credentials'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh 'pip install -r requirements.txt'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh 'python manage.py test --noinput'
                    sh 'pytest --junitxml=test-results.xml'
                }
            }
            post {
                always {
                    junit 'messaging_app/test-results.xml'
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                dir('messaging_app') {
                    sh 'flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics'
                    sh 'flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('messaging_app') {
                    script {
                        dockerImage = docker.build("your-dockerhub-username/messaging-app:${env.BUILD_ID}")
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            emailext (
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "The build ${env.BUILD_URL} completed successfully.",
                to: "developer@example.com"
            )
        }
        failure {
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "The build ${env.BUILD_URL} failed. Please check the logs.",
                to: "developer@example.com"
            )
        }
    }
}
