name: Django CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd messaging_app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest coverage

    - name: Run flake8 linting
      run: |
        cd messaging_app
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Setup MySQL database
      run: |
        sudo systemctl start mysql
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_db;"

    - name: Run migrations
      run: |
        cd messaging_app
        python manage.py makemigrations
        python manage.py migrate

    - name: Run tests with coverage
      run: |
        cd messaging_app
        coverage run --source='.' manage.py test
        coverage xml
        coverage report

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: messaging_app/coverage.xml

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: messaging_app/test-results.xml
      if: always()

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security check
      run: |
        cd messaging_app
        pip install bandit
        bandit -r . -f html -o security-report.html

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: messaging_app/security-report.html
